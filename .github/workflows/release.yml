name: CI, Prebuilds & Release

on:
  pull_request:
    branches: [ main ]
  push:
    tags:
      - 'v*'
  release:
    types: [ published ]

permissions:
  contents: write

jobs:
  test:
    name: Run tests on PRs
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node: [20]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'yarn'

      - name: Install dependencies (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          yarn install --frozen-lockfile || yarn install

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: yarn install

      - name: Run unit tests
        run: yarn unit

  prebuild:
    name: Build prebuilds (release)
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node: [20]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'yarn'

      - name: Install dependencies (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          yarn install --frozen-lockfile || yarn install

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: yarn install

      - name: Force rebuild native addon
        run: yarn rebuild:force

      - name: Prepare artifact directory
        run: |
          mkdir -p artifacts
          # Copy any built native modules into artifacts. Adjust path if your native addon outputs elsewhere.
          if [ -d build/Release ]; then cp -v build/Release/*.node artifacts/ || true; fi
        shell: bash

      - name: Upload prebuild artifact (per-job)
        uses: actions/upload-artifact@v4
        with:
          name: prebuild-${{ matrix.os }}-node${{ matrix.node }}
          path: artifacts/

  release_upload:
    name: Package & upload prebuilds to GitHub Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
    needs: prebuild
    steps:
      - name: Download all prebuild artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded

      - name: List downloaded content
        run: ls -R downloaded

      - name: Package artifacts
        shell: bash
        run: |
          mkdir -p packaged
          for d in downloaded/*; do
            # each $d is a folder named like prebuild-... containing .node files
            name=$(basename "$d")
            # Create a tar.gz of the folder contents
            tar -C "$d" -czf "packaged/${name}.tar.gz" . || true
            # Also create a zip as a fallback/alternative with identical contents
            (cd "$d" && zip -r "${GITHUB_WORKSPACE}/packaged/${name}.zip" .) || true
          done

      - name: Upload packaged prebuilds to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            packaged/*

  publish-npm:
    name: Publish to npm (on release)
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
    needs: release_upload
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node for publish
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org/'

      - name: Download prebuild artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded

      - name: Restore prebuilt native modules
        shell: bash
        run: |
          mkdir -p dist/native
          # Copy each artifact's .node files into a platform-named subfolder to avoid overwrites
          for d in downloaded/*; do
            name=$(basename "$d")
            mkdir -p "dist/native/$name"
            for f in "$d"/*.node; do
              if [ -f "$f" ]; then
                cp -v "$f" "dist/native/$name/$(basename "$f")" || true
              fi
            done
          done

          # Also create prefixed copies at dist/native for backward compatibility
          for f in downloaded/*/*.node; do
            if [ -f "$f" ]; then
              artifact=$(basename "$(dirname \"$f\")")
              cp -v "$f" "dist/native/${artifact}-$(basename \"$f\")" || true
            fi
          done

          ls -lR dist/native || true

      - name: Configure npm auth
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Install & build
        run: |
          yarn install --frozen-lockfile || yarn install
          yarn build

      - name: Publish package
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
